trigger:
  branches:
    include:
    - '*'

stages:
- stage: Test
  jobs:
  - job: Ubuntu
    pool:
      vmImage: "ubuntu-latest"
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
        Python38:
          python.version: '3.8'
        Python39:
          python.version: '3.9'
        Python310:
          python.version: '3.10'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'
      name: pybin
    - script: |
        PYTHONBIN=$(pybin.pythonLocation)/bin/python
        echo "##vso[task.setvariable variable=pythonbin]$PYTHONBIN"
      displayName: Set Python $(python.version)
    - template: .azure-pipelines/build-run-tests.yml
  - job: Ubuntu_EasternTimezone
    pool:
      vmImage: "ubuntu-latest"
    strategy:
      matrix:
        Python38:
          python.version: '3.8'
    steps:
      - bash: sudo timedatectl set-timezone America/New_York
        displayName: Set timezone
      - bash: date
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(python.version)'
          architecture: 'x64'
        name: pybin
      - script: |
          PYTHONBIN=$(pybin.pythonLocation)/bin/python
          echo "##vso[task.setvariable variable=pythonbin]$PYTHONBIN"
        displayName: Set Python $(python.version)
      - template: .azure-pipelines/build-run-tests.yml
  - job: MacOS
    pool:
      vmImage: 'macOS-latest'
    strategy:
      matrix:
        Python37:
          python.version: '3.7'
        Python38:
          python.version: '3.8'
        Python39:
          python.version: '3.9'
        Python310:
          python.version: '3.10'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'
      name: pybin
    - script: |
        PYTHONBIN=$(pybin.pythonLocation)/bin/python
        echo "##vso[task.setvariable variable=pythonbin]$PYTHONBIN"
      displayName: Set Python $(python.version)
    - template: .azure-pipelines/build-run-tests.yml
  - job: Windows
    pool:
      vmImage: 'windows-latest'
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
        Python38:
          python.version: '3.8'
        Python39:
          python.version: '3.9'
        Python310:
          python.version: '3.10'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'
      name: pybin
    - script: |
        set PYTHONBIN=$(pybin.pythonLocation)\python.exe
        echo ##vso[task.setvariable variable=pythonbin]%PYTHONBIN%
      displayName: Set Python $(python.version)
    - script: |
        echo $(pythonbin)
        $(pythonbin) --version
      displayName: Check Python path
    - script: $(pythonbin) -m pip install --user -U pybind11 pytest pytest-cov coverage codecov
      displayName: Install dependencies
    - script: |
        $(pythonbin) setup.py build -g
        $(pythonbin) setup.py install --user
      displayName: Install package
    - script: |
        FOR /F "tokens=* USEBACKQ" %%F IN (`$(pythonbin) -c "import os, pyorc; print(os.path.dirname(pyorc.__file__))"`) DO (SET INSTALLDIR=%%F)
        echo %INSTALLDIR%
        $(pythonbin) -m pytest -vs --junitxml=./test-results.xml --cov=%INSTALLDIR% tests/
      displayName: Run pytest

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: test-results.xml
        testRunTitle: Tests on $(Agent.OS) with Python $(python.version)
      condition: succeededOrFailed()

    - script: |
           $(pythonbin) -m codecov
      env:
        CODECOV_TOKEN: $(codecov)
      displayName: Report Coverage
      condition: succeeded()

- stage: Build
  jobs:
  - job: manylinux_x86_64
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: UsePythonVersion@0
      - bash: |
          set -o errexit
          python3 -m pip install --upgrade pip
          pip3 install cibuildwheel==2.3.1
        displayName: Install cibuildwheel dependencies
      - bash: cibuildwheel --output-dir wheelhouse .
        env:
          CIBW_BUILD_VERBOSITY: 3
          CIBW_ARCHS: x86_64
          CIBW_BUILD: "*-manylinux_*"
        displayName: Build wheels
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: 'wheelhouse'
          artifactName: wheels

  - job: musllinux_x86_64
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: UsePythonVersion@0
      - bash: |
          set -o errexit
          python3 -m pip install --upgrade pip
          pip3 install cibuildwheel==2.3.1
        displayName: Install cibuildwheel dependencies
      - bash: cibuildwheel --output-dir wheelhouse .
        env:
          CIBW_BUILD_VERBOSITY: 3
          CIBW_ARCHS: x86_64
          CIBW_BUILD: "*-musllinux_*"
        displayName: Build wheels
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: 'wheelhouse'
          artifactName: wheels

  - job: manylinux_aarch64
    timeoutInMinutes: 100
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: UsePythonVersion@0
      - bash: |
          set -o errexit
          python3 -m pip install --upgrade pip
          pip3 install cibuildwheel==2.3.1
        displayName: Install cibuildwheel dependencies
      - script: docker run --privileged --rm tonistiigi/binfmt --install all
        displayName: Register QEMU
      - bash: cibuildwheel --output-dir wheelhouse .
        env:
          CIBW_BUILD_VERBOSITY: 3
          CIBW_ARCHS: aarch64
          CIBW_BUILD: "*-manylinux_*"
        displayName: Build wheels
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: 'wheelhouse'
          artifactName: wheels

  - job: musllinux_aarch64
    timeoutInMinutes: 150
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: UsePythonVersion@0
      - bash: |
          set -o errexit
          python3 -m pip install --upgrade pip
          pip3 install cibuildwheel==2.3.1
        displayName: Install cibuildwheel dependencies
      - script: docker run --privileged --rm tonistiigi/binfmt --install all
        displayName: Register QEMU
      - bash: cibuildwheel --output-dir wheelhouse .
        env:
          CIBW_BUILD_VERBOSITY: 3
          CIBW_ARCHS: aarch64
          CIBW_BUILD: "*-musllinux_*"
        displayName: Build wheels
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: 'wheelhouse'
          artifactName: wheels

  - job: macos
    pool:
      vmImage: 'macOS-latest'
    steps:
      - task: UsePythonVersion@0
      - bash: |
          set -o errexit
          python3 -m pip install --upgrade pip
          python3 -m pip install cibuildwheel==2.3.1
        displayName: Install cibuildwheel dependencies
      - bash: cibuildwheel --output-dir wheelhouse .
        env:
          CIBW_BUILD_VERBOSITY: 3
        displayName: Build wheels
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: wheelhouse
          artifactName: wheels

  - job: windows_amd64
    pool:
      vmImage: 'windows-latest'
    steps:
      - task: UsePythonVersion@0
      - bash: |
          set -o errexit
          python -m pip install --upgrade pip
          pip install cibuildwheel==2.3.1
        displayName: Install cibuildwheel dependencies
      - bash: cibuildwheel --output-dir wheelhouse .
        env:
          CIBW_BUILD_VERBOSITY: 3
          CIBW_ARCHS: AMD64
        displayName: Build wheels
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: 'wheelhouse'
          artifactName: wheels
